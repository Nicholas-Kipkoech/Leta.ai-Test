/**
 * @fileoverview gRPC-Web generated client stub for contacts
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.1
// source: contacts.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as contacts_pb from './contacts_pb';


export class ContactServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddContact = new grpcWeb.MethodDescriptor(
    '/contacts.ContactService/AddContact',
    grpcWeb.MethodType.UNARY,
    contacts_pb.Contact,
    contacts_pb.ContactID,
    (request: contacts_pb.Contact) => {
      return request.serializeBinary();
    },
    contacts_pb.ContactID.deserializeBinary
  );

  addContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null): Promise<contacts_pb.ContactID>;

  addContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contacts_pb.ContactID) => void): grpcWeb.ClientReadableStream<contacts_pb.ContactID>;

  addContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contacts_pb.ContactID) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/contacts.ContactService/AddContact',
        request,
        metadata || {},
        this.methodDescriptorAddContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/contacts.ContactService/AddContact',
    request,
    metadata || {},
    this.methodDescriptorAddContact);
  }

  methodDescriptorGetContacts = new grpcWeb.MethodDescriptor(
    '/contacts.ContactService/GetContacts',
    grpcWeb.MethodType.UNARY,
    contacts_pb.Empty,
    contacts_pb.ContactList,
    (request: contacts_pb.Empty) => {
      return request.serializeBinary();
    },
    contacts_pb.ContactList.deserializeBinary
  );

  getContacts(
    request: contacts_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<contacts_pb.ContactList>;

  getContacts(
    request: contacts_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contacts_pb.ContactList) => void): grpcWeb.ClientReadableStream<contacts_pb.ContactList>;

  getContacts(
    request: contacts_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contacts_pb.ContactList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/contacts.ContactService/GetContacts',
        request,
        metadata || {},
        this.methodDescriptorGetContacts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/contacts.ContactService/GetContacts',
    request,
    metadata || {},
    this.methodDescriptorGetContacts);
  }

  methodDescriptorUpdateContact = new grpcWeb.MethodDescriptor(
    '/contacts.ContactService/UpdateContact',
    grpcWeb.MethodType.UNARY,
    contacts_pb.Contact,
    contacts_pb.Contact,
    (request: contacts_pb.Contact) => {
      return request.serializeBinary();
    },
    contacts_pb.Contact.deserializeBinary
  );

  updateContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null): Promise<contacts_pb.Contact>;

  updateContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contacts_pb.Contact) => void): grpcWeb.ClientReadableStream<contacts_pb.Contact>;

  updateContact(
    request: contacts_pb.Contact,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contacts_pb.Contact) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/contacts.ContactService/UpdateContact',
        request,
        metadata || {},
        this.methodDescriptorUpdateContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/contacts.ContactService/UpdateContact',
    request,
    metadata || {},
    this.methodDescriptorUpdateContact);
  }

  methodDescriptorDeleteContact = new grpcWeb.MethodDescriptor(
    '/contacts.ContactService/DeleteContact',
    grpcWeb.MethodType.UNARY,
    contacts_pb.ContactID,
    contacts_pb.Empty,
    (request: contacts_pb.ContactID) => {
      return request.serializeBinary();
    },
    contacts_pb.Empty.deserializeBinary
  );

  deleteContact(
    request: contacts_pb.ContactID,
    metadata: grpcWeb.Metadata | null): Promise<contacts_pb.Empty>;

  deleteContact(
    request: contacts_pb.ContactID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: contacts_pb.Empty) => void): grpcWeb.ClientReadableStream<contacts_pb.Empty>;

  deleteContact(
    request: contacts_pb.ContactID,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: contacts_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/contacts.ContactService/DeleteContact',
        request,
        metadata || {},
        this.methodDescriptorDeleteContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/contacts.ContactService/DeleteContact',
    request,
    metadata || {},
    this.methodDescriptorDeleteContact);
  }

}

