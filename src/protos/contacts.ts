/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: contacts.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace contacts {
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class Contact extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            email?: string;
            phone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            email?: string;
            phone?: string;
        }): Contact {
            const message = new Contact({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                email?: string;
                phone?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.phone.length)
                writer.writeString(4, this.phone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contact {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contact();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.phone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Contact {
            return Contact.deserialize(bytes);
        }
    }
    export class ContactID extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): ContactID {
            const message = new ContactID({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactID {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactID {
            return ContactID.deserialize(bytes);
        }
    }
    export class ContactList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contacts?: Contact[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contacts" in data && data.contacts != undefined) {
                    this.contacts = data.contacts;
                }
            }
        }
        get contacts() {
            return pb_1.Message.getRepeatedWrapperField(this, Contact, 1) as Contact[];
        }
        set contacts(value: Contact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            contacts?: ReturnType<typeof Contact.prototype.toObject>[];
        }): ContactList {
            const message = new ContactList({});
            if (data.contacts != null) {
                message.contacts = data.contacts.map(item => Contact.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contacts?: ReturnType<typeof Contact.prototype.toObject>[];
            } = {};
            if (this.contacts != null) {
                data.contacts = this.contacts.map((item: Contact) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contacts.length)
                writer.writeRepeatedMessage(1, this.contacts, (item: Contact) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contacts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Contact.deserialize(reader), Contact));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactList {
            return ContactList.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedContactServiceService {
        static definition = {
            AddContact: {
                path: "/contacts.ContactService/AddContact",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Contact) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Contact.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContactID) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContactID.deserialize(new Uint8Array(bytes))
            },
            GetContacts: {
                path: "/contacts.ContactService/GetContacts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ContactList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ContactList.deserialize(new Uint8Array(bytes))
            },
            UpdateContact: {
                path: "/contacts.ContactService/UpdateContact",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Contact) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Contact.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Contact) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Contact.deserialize(new Uint8Array(bytes))
            },
            DeleteContact: {
                path: "/contacts.ContactService/DeleteContact",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ContactID) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ContactID.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AddContact(call: grpc_1.ServerUnaryCall<Contact, ContactID>, callback: grpc_1.sendUnaryData<ContactID>): void;
        abstract GetContacts(call: grpc_1.ServerUnaryCall<Empty, ContactList>, callback: grpc_1.sendUnaryData<ContactList>): void;
        abstract UpdateContact(call: grpc_1.ServerUnaryCall<Contact, Contact>, callback: grpc_1.sendUnaryData<Contact>): void;
        abstract DeleteContact(call: grpc_1.ServerUnaryCall<ContactID, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
    }
    export class ContactServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedContactServiceService.definition, "ContactService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AddContact: GrpcUnaryServiceInterface<Contact, ContactID> = (message: Contact, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContactID>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContactID>, callback?: grpc_1.requestCallback<ContactID>): grpc_1.ClientUnaryCall => {
            return super.AddContact(message, metadata, options, callback);
        };
        GetContacts: GrpcUnaryServiceInterface<Empty, ContactList> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ContactList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ContactList>, callback?: grpc_1.requestCallback<ContactList>): grpc_1.ClientUnaryCall => {
            return super.GetContacts(message, metadata, options, callback);
        };
        UpdateContact: GrpcUnaryServiceInterface<Contact, Contact> = (message: Contact, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Contact>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Contact>, callback?: grpc_1.requestCallback<Contact>): grpc_1.ClientUnaryCall => {
            return super.UpdateContact(message, metadata, options, callback);
        };
        DeleteContact: GrpcUnaryServiceInterface<ContactID, Empty> = (message: ContactID, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteContact(message, metadata, options, callback);
        };
    }
}
